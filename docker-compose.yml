services:
  # 블루/그린 배포를 위한 API 인스턴스들
  cdl-gateway-blue:
    build: 
      context: .
      dockerfile: Dockerfile
    image: cdl-gateway:latest
    env_file:
      - .env
    ports:
      - "18001:8000"
    environment:
      - DEPLOYMENT_SLOT=blue
      - AWS_DEFAULT_REGION=${AWS_REGION:-ap-northeast-2}
      # AWS credentials provided by EC2 Instance Profile / IAM Role
      # Environment variables will be loaded from AWS Secrets Manager
    volumes:
      - ./logs/blue:/var/log/cdl-gateway
    restart: unless-stopped

    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/status/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s
    networks:
      - cdl-network

  cdl-gateway-green:
    build: 
      context: .
      dockerfile: Dockerfile
    image: cdl-gateway:latest
    env_file:
      - .env
    ports:
      - "18002:8000"
    environment:
      - DEPLOYMENT_SLOT=green
      - AWS_DEFAULT_REGION=${AWS_REGION:-ap-northeast-2}
      # AWS credentials provided by EC2 Instance Profile / IAM Role
      # Environment variables will be loaded from AWS Secrets Manager
    volumes:
      - ./logs/green:/var/log/cdl-gateway
    restart: unless-stopped

    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/status/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s
    networks:
      - cdl-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - ./nginx/certbot:/var/www/certbot:ro
    depends_on:
      - cdl-gateway-blue
      - cdl-gateway-green
    restart: unless-stopped
    networks:
      - cdl-network

networks:
  cdl-network:
    driver: bridge